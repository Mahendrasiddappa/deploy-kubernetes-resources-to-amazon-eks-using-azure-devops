jobs:
  - job: "Build"
    displayName: "Build: Docker Image & Helm -> ECR"
    continueOnError: false
    steps:
      - task: HelmInstaller@1
        displayName: 'Install Helm'
        inputs:
          helmVersionToInstall: ${{ parameters.helmVersion }}

      - task: AWSShellScript@1
        displayName: 'ECR login'
        name: ecr
        inputs:
            awsCredentials: ${{ parameters.serviceConnectionName }}
            regionName: ${{ parameters.awsRegion }}
            failOnStandardError: true
            scriptType: 'inline'
            inlineScript: |
              echo "Service Connection Name: ${{ parameters.serviceConnectionName }}"
              echo "AWS Region: ${{ parameters.awsRegion }}"
              echo "Project Name: ${{ parameters.projectName }}"
              echo "AWS ECR Account ID: $(awsECRAccountId)"

              echo 'Step 1: Using identity'
              aws sts get-caller-identity

              echo 'Step 3: Setting HELM_EXPERIMENTAL_OCI to 1'
              export HELM_EXPERIMENTAL_OCI=1

              echo 'Step 4: Fetching repository URI'
              repository_uri=$(aws ecr describe-repositories \
                --repository-names ${{ parameters.projectName }} \
                --region ${{ parameters.awsRegion }} \
                --registry-id $(awsECRAccountId) \
                --query "repositories[].repositoryUri" \
                --output text)
              
              if [ -z "$repository_uri" ]; then
                echo "Error: Repository URI is empty"
                exit 1
              fi

              echo "Repository URI: $repository_uri"
              
              # Set output variables for Repository_URI
              echo "##vso[task.setvariable variable=REPOSITORY_URI;isOutput=true]$repository_uri"

              echo 'Step 5: Docker Login to ECR'
              aws ecr get-login-password \
                --region ${{ parameters.awsRegion }} | docker login \
                --username AWS \
                --password-stdin $repository_uri 2>&1
              
              if [ $? -ne 0 ]; then
                echo "Error: Docker login failed"
                exit 1
              fi

              echo 'Step 6: HELM Login to ECR'
              aws ecr get-login-password \
                --region ${{ parameters.awsRegion }} | helm registry login \
                --username AWS \
                --password-stdin $(awsECRAccountId).dkr.ecr.${{ parameters.awsRegion }}.amazonaws.com 2>&1

              if [ $? -ne 0 ]; then
                echo "Error: HELM login failed"
                exit 1
              fi

              echo 'All steps completed successfully'
                      
      - bash: |
          echo 'Building and tagging Docker Image...'
          echo 'Branch is: $(Build.SourceBranch)'
          echo "Dockerfile path: $(dockerfilePath)"
          echo "Docker context: $(dirname $(dockerfilePath))"
          docker_ctx=$(dirname $(dockerfilePath))

          # Build Docker Image
          docker build --quiet -t $(ecr.REPOSITORY_URI):$(imageTag) -f $(dockerfilePath) $docker_ctx

        failOnStderr: true
        displayName: 'Docker Build'

      - bash: |
          docker push $(ecr.REPOSITORY_URI):$(imageTag)
        failOnStderr: true
        displayName: 'Docker Push'

      - bash: |
          helm package \
              --version $(helmChartVersion) \
              --app-version $(imageTag) \
              $(helmChartDirPath)
        failOnStderr: true
        displayName: 'Helm Package'

      - task: AWSShellScript@1
        name: helmPush
        displayName: 'Helm Push'
        inputs:
            awsCredentials: ${{ parameters.serviceConnectionName }}
            regionName: ${{ parameters.awsRegion }}
            failOnStandardError: true
            scriptType: 'inline'
            inlineScript: |
              # Ensure Helm OCI support is enabled
              export HELM_EXPERIMENTAL_OCI=1

              # Find and verify the chart package
              chartPackage=$(ls ${{ parameters.projectName }}-$(helmChartVersion).tgz 2>/dev/null)

              if [ -z "$chartPackage" ]; then
                echo "Error: Chart package file not found for version $(helmChartVersion)" >&2
                exit 1
              fi

              echo "Chart Package: $chartPackage"

              # Helm Push
              helm_push_output=$(helm push $chartPackage oci://$(awsECRAccountId).dkr.ecr.$(awsECRRegion).amazonaws.com/ 2>&1)
              helm_push_exit_code=$?
              echo "$helm_push_output"

              if [ $helm_push_exit_code -ne 0 ]; then
                echo "Error: Helm push failed" >&2
                exit 1
              fi

              # Output images in ECR repository
              aws_ecr_output=$(aws ecr describe-images \
                  --repository-name ${{ parameters.projectName }} \
                  --region $(awsECRRegion) \
                  --registry-id $(awsECRAccountId) \
                  --query 'sort_by(imageDetails,& imagePushedAt)[*]' 2>&1)
              aws_ecr_exit_code=$?
              echo "$aws_ecr_output"

              if [ $aws_ecr_exit_code -ne 0 ]; then
                echo "Error: AWS ECR describe-images command failed" >&2
                exit 1
              fi

      - publish: $(build.artifactStagingDirectory)
        artifact: build-artifact
        condition: succeeded()
